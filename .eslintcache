[{"/Users/bytedance/Code/node/web-IDE/src/index.tsx":"1","/Users/bytedance/Code/node/web-IDE/src/reportWebVitals.ts":"2","/Users/bytedance/Code/node/web-IDE/src/App.tsx":"3","/Users/bytedance/Code/node/web-IDE/src/pages/community_edition.tsx":"4","/Users/bytedance/Code/node/web-IDE/src/components/language_select/language_select.tsx":"5","/Users/bytedance/Code/node/web-IDE/src/components/editor/monaco.tsx":"6","/Users/bytedance/Code/node/web-IDE/src/hooks/windowSize.ts":"7","/Users/bytedance/Code/node/web-IDE/src/cache/cache.ts":"8"},{"size":500,"mtime":1612336342709,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1612336342710,"results":"11","hashOfConfig":"10"},{"size":241,"mtime":1612701016543,"results":"12","hashOfConfig":"10"},{"size":2647,"mtime":1612770652322,"results":"13","hashOfConfig":"10"},{"size":648,"mtime":1612770405973,"results":"14","hashOfConfig":"10"},{"size":840,"mtime":1612770602417,"results":"15","hashOfConfig":"10"},{"size":580,"mtime":1612764986970,"results":"16","hashOfConfig":"10"},{"size":629,"mtime":1612770619667,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"h1xcbp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/Users/bytedance/Code/node/web-IDE/src/index.tsx",[],["37","38"],"/Users/bytedance/Code/node/web-IDE/src/reportWebVitals.ts",[],"/Users/bytedance/Code/node/web-IDE/src/App.tsx",[],"/Users/bytedance/Code/node/web-IDE/src/pages/community_edition.tsx",["39","40"],"import React, {useState} from \"react\";\nimport Monaco from \"../components/editor/monaco\";\nimport useWindowSize from \"../hooks/windowSize\";\nimport {Button, Col, Input, Row, Tabs} from \"antd\";\nimport axios from \"axios\";\nimport LanguageSelect from \"../components/language_select/language_select\";\nimport {getCode, getLanguage, storeCode, storeLanguage} from '../cache/cache'\n\nconst {TabPane} = Tabs;\nconst languages = [\"cpp\", \"java\"];\nconst {TextArea} = Input;\n\nfunction CommunityEdition() {\n  const [language, setLanguage] = useState(getLanguage());\n  const [code, setCode] = useState(getCode(language));\n  const size = useWindowSize();\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [tabKey, setTabKey] = useState(\"1\");\n  const onClick = () => {\n    console.log(code);\n    const data = {\n      language: String(language),\n      input: input,\n      code: code,\n    };\n    axios.post(\"/api/judge\", data).then((res) => {\n      console.log(res.data.resp.result_);\n      setOutput(res.data.resp.result_);\n    });\n    setTabKey(\"2\");\n  };\n  return (\n    <div className=\"App\">\n      <LanguageSelect setLanguage={setLanguage} setCode={setCode} value={String(language)}/>\n      <Monaco language={languages[language]} setCode={setCode} code={code}/>\n      <Row style={{height: String(size.innerHeight * 0.35)}}>\n        <Col span=\"22\">\n          <MyTabs\n            input={input}\n            output={output}\n            tabKey={tabKey}\n            setInput={setInput}\n            setOutput={setOutput}\n            setTabKey={setTabKey}\n          />\n        </Col>\n        <Col span=\"2\">\n          <Button onClick={onClick} size={'large'}>运行</Button>\n        </Col>\n      </Row>\n\n      {/* <MyTerminal container_id=\"test\"></MyTerminal> */}\n    </div>\n  );\n}\n\nfunction MyTextArea(props: any) {\n  const size = useWindowSize();\n  return (\n    <TextArea\n      style={{\n        width: \"100%\",\n        resize: \"none\",\n        height: String(size.innerHeight * 0.23) + \"px\",\n      }}\n      bordered={false}\n      onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        props.setValue(event.target.value);\n      }}\n      value={props.value}\n    >\n    </TextArea>\n  );\n}\n\nfunction MyTabs(props: any) {\n  return (\n    <Tabs activeKey={props.tabKey} onChange={(key) => {\n      props.setTabKey(key)\n    }}>\n      <TabPane tab=\"输入\" key=\"1\">\n        <MyTextArea value={props.input} setValue={props.setInput}/>\n      </TabPane>\n      <TabPane tab=\"输出\" key=\"2\">\n        <MyTextArea value={props.output} setValue={props.setOutput}/>\n      </TabPane>\n    </Tabs>\n  );\n}\n\nexport default CommunityEdition;\n","/Users/bytedance/Code/node/web-IDE/src/components/language_select/language_select.tsx",[],"/Users/bytedance/Code/node/web-IDE/src/components/editor/monaco.tsx",[],"/Users/bytedance/Code/node/web-IDE/src/hooks/windowSize.ts",[],"/Users/bytedance/Code/node/web-IDE/src/cache/cache.ts",["41"],"function set(k: string, v: string) {\n  localStorage.setItem(`web_ide_${k}`, v)\n}\n\nfunction get(k: string) {\n  const v = localStorage.getItem(`web_ide_${k}`)\n  if (!v)\n    return ''\n  return v\n}\n\nfunction storeLanguage(language: number) {\n  set(`language`, `${language}`);\n}\n\nfunction getLanguage(): number {\n  const l = get('language')\n  if (l=='' || isNaN(Number(l)))\n    return 0;\n  return Number(l);\n}\n\nfunction storeCode(language: number, code: string) {\n  set(String(language), code)\n}\n\nfunction getCode(language: number) {\n  return get(String(language))\n}\n\n\nexport {\n  storeLanguage,\n  getLanguage,\n  storeCode,\n  getCode\n}",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":7,"column":31,"nodeType":"48","messageId":"49","endLine":7,"endColumn":40},{"ruleId":"46","severity":1,"message":"50","line":7,"column":42,"nodeType":"48","messageId":"49","endLine":7,"endColumn":55},{"ruleId":"51","severity":1,"message":"52","line":18,"column":8,"nodeType":"53","messageId":"54","endLine":18,"endColumn":10},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'storeCode' is defined but never used.","Identifier","unusedVar","'storeLanguage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]